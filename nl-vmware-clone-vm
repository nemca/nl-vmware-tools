#!/bin/bash 
#
# Clones an existing VM template into a new VM instance.
#
# Author: Michael Bruskov <mixanemca@yandex.ru>
#

progname=${0##*/} 
progversion=1.2
knife_args=

shopt -s nocasematch

usage() { 
	cat <<-EO
Usage: ${progname} [options] 

Options: 
EO
	cat <<-EO | column -s\& -t 

  -c --config & path to knife.rb config
  -d --domain & set VM domain
  --dns & set VM nameserver
  -h --help & show this message 
  --host & set server name of VM host system
  --ip & set VM ipv4 address
  -n --name & set VM hostname
  -r --run-list & set VM run-list
  -s --datastore & set datastore name
  -t --template & set template name
  -v --version & show version information 
EO
} 

add_arg() {
	local arg="$1"
	local val="$2"

	echo "${knife_args}" | egrep -q -- "${arg}"
	if [[ "$?" -eq 0 ]]; then
		knife_args=$(echo "${knife_args}" | sed -e "s|"${arg}" [a-zA-Z0-9._/'-]*|"${arg}" "${val}" |")
		return
	fi

	if [[ "$knife_args" != "" ]]; then
		knife_args="${knife_args} $(printf "%s %s" "${arg}" "${val}")"
	else
		knife_args="$(printf "%s %s" "${arg}" "${val}")"
	fi
}

config_args() {
	if [[ -n "${config}"  ]]; then
		(printf "%s %s" "--config" "${config}")
	fi
}

err_argument() {
	echo -e "Not defined required option: "$1"" >&2
	echo; usage; exit 1
}

shortopts="c:d:hn:r:s:t:v" 
longopts="config:,ip:,name:,domain:,datastore:,dns:,run-list:,host:,template:,help,version" 

# defaults variables
domain="mixanemca.ru"; add_arg "--cdomain" "${domain}"
dns="10.10.12.90"; add_arg "--cdnsips" "${dns}"
template="CentOS7_template"; add_arg "--template" "${template}"
runlist="role[LinuxServer],recipe[yum::cleanup]"; add_arg "--run-list" "${runlist}"

args=$(getopt -s bash --options "${shortopts}" --longoptions "${longopts}" --name "${progname}" -- "$@") 

eval set -- "${args}" 

while true; do 
	case "$1" in 
		-h|--help) 
			usage; exit 0 ;; 
		-v|--version) 
			echo "${progversion}"; exit 0 ;; 
		-c|--config)
			shift; config="$1"; add_arg "--config" "${config}" ;;
		--ip) 
			shift; ip="$1"; add_arg "--cips" "${ip}" ;; 
		-n|--name)
			shift; name="$1"; add_arg "--chostname" "${name}" ;; 
		-d|--domain)
			shift; domain="$1"; add_arg "--cdomain" "${domain}" ;;
		-s|--datastore)
			shift; datastore="$1"; add_arg "--datastore" "${datastore}" ;;
		--dns)
			shift; dns="$1"; add_arg "--cdnsips" "${dns}" ;;
		-r|--run-list)
			shift; runlist="$1"; add_arg "--run-list" "${runlist}" ;;
		--host)
			shift; host="$1" ;;
		-t|--template)
			shift; template="$1"; add_arg "--template" "${template}" ;;
		--) 
			shift; break ;; 
		*) 
			shift; break ;; 
	esac
	shift
done

if [[ -z "${name}" ]]; then
	err_argument "-n|--name"
elif [[ -z "${datastore}" ]]; then
	err_argument "-s|--datastore"
elif [[ -z "${host}" ]]; then
	err_argument "--host"
elif [[ -z "${ip}" ]]; then
	err_argument "--ip"
fi

if ! [[ "${ip}" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
	echo -e "IP addres must be write in CIDR notation\nExample: 10.10.3.230/24" >&2
	exit 1
fi
echo "Configuration: "
echo "--------------------------------------------------------------------------------"
cat <<-EO | column -s\& -tx
config & ${config}
datastore & ${datastore}
dns & ${dns}
domain & ${domain}
host & ${host}
ip & ${ip}
name & ${name}
run-list & ${runlist}
template & ${template}
EO
echo "--------------------------------------------------------------------------------"
echo -ne "Are you shure? [yes/no]: "
read answer
if ! [[ "${answer}" =~ ^(y|yes)$ ]]; then
	exit 0
fi

knife vsphere vm clone "${name}" \
	--start true \
	--bootstrap true \
	--json-attributes "{\"set_fqdn\": \"${name}.${domain}\"}" \
	${knife_args} $(config_args)

if [[ "$?" -ne 0 ]]; then
	echo "Failed clone VM "${name}""
	exit 2
fi

echo

knife vsphere vm migrate "${name}" \
	--dest-host "${host}" \
	--dest-datastore "${datastore}" \
	--resource-pool BDC \
	$(config_args)

echo
knife vsphere vm state "${name}" $(config_args)
echo
knife node show "${name}" $(config_args)
